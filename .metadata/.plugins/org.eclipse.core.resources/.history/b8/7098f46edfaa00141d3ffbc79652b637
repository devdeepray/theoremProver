package prover;

public class Parser {
	static ExprTree makeTree(String exprStr) {
		exprStr = removeParen(exprStr);
		ExprTree exprTree = new ExprTree();
		
		int parenCount = 0;
		
		for (int i = 0; i < exprStr.length(); ++i) {
			if (exprStr.charAt(i) == '(') ++parenCount;
			else if (exprStr.charAt(i) == ')') --parenCount;
			
			if (parenCount == 0) {
				if (i + 1 == exprStr.length()) {
					exprTree.prop = exprStr;
					return exprTree;
				}
				else {
					if (exprStr.charAt(0) == '(') {
						exprTree.left = parse(exprStr.substring(1, i));
					}
					else {
						exprTree.left = parse(exprStr.substring(0, i + 1));
					}
					
					if (exprStr.charAt(exprStr.length() - 1) == ')') {
						exprTree.right = parse(exprStr.substring(i + 4, exprStr.length() - 1));
					}
					else {
						//System.out.println(exprStr);
						exprTree.right = parse(exprStr.substring(i + 3, exprStr.length()));
					}
					return exprTree;
				}
			}
		}
		return null;
	}
	
	
	/*
	 * Gets the position of the first matched bracket on the right
	 */
	static int getMatchedBracketPos(String expr, int b1Pos)
	{
		int parenCount = 1;
		for(int pos = b1Pos+1; pos != expr.length(); ++pos)
		{
			if(expr.charAt(pos) == '(') ++parenCount;
			if(expr.charAt(pos) == ')') --parenCount;
			if(parenCount == 0) return pos;
		}
		return -1;
	}
	
	/*
	 * Removes ~E and replaces it with (E->F)
	 */
	static String removeTilde(String exprStr) {
		
		int tildePos = 0;
		while((tildePos = exprStr.indexOf('~')) != -1)
		{
			if(tildePos == -1) return exprStr;
			
			if(exprStr.charAt(tildePos + 1) == '(') // Complex expression negated
			{
				int matchedBracketPos = getMatchedBracketPos(exprStr, tildePos + 1);
				String lexpr = exprStr.substring(0, tildePos); // Left subexpression
				String mexpr = exprStr.substring(tildePos + 1, matchedBracketPos + 1); // Negated subexpression 
				mexpr = removeTilde(mexpr);
				String rexpr = exprStr.substring(matchedBracketPos + 1); // Right subexpression
				exprStr = lexpr + "" +  mexpr + "->F)" + rexpr;
			}
			else
			{
				String lexpr = exprStr.substring(0, tildePos); // Left subexpression
				String mexpr = exprStr.substring(tildePos + 1, tildePos + 2); // Negated subexpression 
				mexpr = removeTilde(mexpr);
				String rexpr = exprStr.substring(tildePos + 2); // Right subexpression
				exprStr = lexpr + "(" +  mexpr + "->F)" + rexpr;
			}
		}
		return exprStr;
	}
	
	
	static String removeParen(String exprStr) {
		int minParen = exprStr.length();
		int parenCount = 0;
		for (int i = 0; i <  exprStr.length(); i++) {
			if (exprStr.charAt(i) == '(') ++parenCount;
			else if (exprStr.charAt(i) == ')') --parenCount;
			
			if (exprStr.charAt(i) != '(' && exprStr.charAt(i) != ')') minParen = Math.min(minParen, parenCount);
		}
		
		
		//System.out.println(exprStr.substring(minParen, exprStr.length() - minParen));
		return exprStr.substring(minParen, exprStr.length() - minParen);
	}
	
	/*
	 * Removes spaces and replaces negations with -> equivalents
	 */
	static String preprocess (String exprStr) {
		String finalStr = exprStr.replaceAll("\\s+", ""); // Remove spaces
		finalStr = removeTilde(finalStr); // Remove ~ and replace with A->F
		return finalStr;
	}
	
	static ExprTree parse(String expr) {
		return makeTree(removeParen(preprocess(expr)));
	}
	
}
